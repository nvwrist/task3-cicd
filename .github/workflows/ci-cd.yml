name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонировать репозиторий
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установить Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      # Шаг 3: Установить зависимости
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Шаг 4: Запустить тесты
      - name: Run tests
        run: pytest

  deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонировать репозиторий
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Настроить SSH для подключения к серверу
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Verify SSH key
        run: |
          ssh-add -L  # Проверка, что ключ добавлен в ssh-agent
          ssh -T git@github.com  # Тестирование подключения к GitHub через SSH


      # Шаг 3: Скопировать Docker Compose файл на сервер
      - name: Copy docker-compose.yml to the server
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.yml root@194.87.215.75:/home/user/app/

      # Шаг 4: Подключиться к серверу и выполнить Docker Compose
      - name: Deploy app on the server
        run: |
          ssh -i ~/.ssh/id_rsa root@194.87.215.75 << 'EOF'
            cd /home/user/app
            docker-compose down  # Останавливаем старые контейнеры
            docker-compose pull  # Обновляем образы
            docker-compose up -d  # Запускаем контейнеры
          EOF